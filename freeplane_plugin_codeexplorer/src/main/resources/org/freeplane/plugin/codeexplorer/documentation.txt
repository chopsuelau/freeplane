
Rule Format:

Define rules one per line in the following formats:
  [command] [originPattern] [direction] [targetPattern]
  classpath [path]
  ignore class [classPattern]
  import interface [classPattern]
  import annotation [classPattern]
  import annotation [classPattern].[methodName]()
  group [classPattern]
  group [classPattern] as [group name]
  ignore group [classPattern]

Commands:
- 'allow', 'forbid', 'ignore', 'group' are used for dependency management.
  - 'allow': permits dependencies from origin to target patterns.
  - 'forbid': prevents dependencies from origin to target patterns.
  - 'ignore': excludes certain dependencies from analysis.
  - 'group': organizes JavaClasses into logical slices based on class patterns.

Direction: ->, ->v, ->^
- Indicates the dependency direction:
  - '->' standard dependency,
  - '->v' dependency going downwards in the package hierarchy,
  - '->^' dependency going upwards in the package hierarchy.

Patterns:
- Utilizes AspectJ-like syntax for matching packages and classes.

Path:
- Adds specific directories to the root paths in the 'locations' table.

ClassPattern:
- Matches class names, with broader patterns for 'ignore class' commands.

Locations Table:
- Defines the project root directories for analysis.

Default Classpath Behavior:
- Relies on 'pom.xml' or 'build.gradle', or defaults to the current directory if neither is found.

Comments:
- Lines beginning with '#' or '//' are ignored in the configuration.

Examples:

- 'allow *.service.* -> *.repository.*': Permits classes within the 'service' package to depend on those in the 'repository' package, fostering a clean architecture.

- 'forbid *.*.controller*.. ->^ ..model..': Blocks upward dependencies from 'controller' packages to 'model' packages, ensuring separation of web layers from the data model.

- 'ignore ..util.. ->v ..*Helper..': Ignores downward dependencies from 'util' to 'Helper' classes, accommodating common utility functions across layers.

- 'classpath /target/classes': Sets '/target/classes' as the root directory for class analysis, aligning with Java build conventions.

- 'ignore class com.example..*ServiceImpl..': Excludes specific service implementation classes from the analysis.

- 'import interface java.io.Serializable', 'java.util.List': Recognizes essential Java interfaces, ensuring they're considered in dependency analysis.

- 'import annotation com.example..*Annotation', 'com.example..*Annotation.*.value()': Includes custom annotations in the analysis, useful for frameworks or configurations reliant on annotations.

- 'group ..model.(*).*..': Organizes classes within 'model' packages into logical groups based on their package structure, enabling focused analysis on these segments.

- 'group com.[example1|example2].model..* as Model': Groups model classes from two potential packages under a single 'Model' group for cohesive analysis.

- 'ignore group com.example.util..*': Excludes all classes within the 'com.example.util' package from dependency checks, optimizing analysis performance by avoiding unnecessary code base reloads.

Important Notes:

- 'Ignore Group' vs. 'Ignore Class': 'Ignore group' commands provide a performance benefit by not requiring the code base to be reloaded for each ignored dependency, making them preferable for broad exclusions.

- Grouping and Nested Classes: When grouping, all nested classes are treated as part of their top-level class, ensuring a unified approach to dependency management within class hierarchies.

This refined documentation aims for enhanced clarity and structure, delineating commands, their usage, and examples with added context for each rule.
